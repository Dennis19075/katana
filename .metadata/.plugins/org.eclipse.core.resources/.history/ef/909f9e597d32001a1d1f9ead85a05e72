package katana.controller;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.inject.Named;

import katana.controller.JSFUtil;
import katana.model.entities.ProTipoProducto;
import katana.model.manager.ManagerProducto;

import java.io.Serializable;
import java.util.List;

@Named
@SessionScoped
public class BeanProducto implements Serializable{
	private static final long serialVersionUID = 1L;
	@EJB
	private ManagerProducto managerProducto;
	private List<ProTipoProducto> listaTipoProducto;
	private ProTipoProducto tipo_producto;
	private boolean panelColapsado;
	private ProTipoProducto tipo_productoSeleccionado;
	@PostConstruct
	public void inicializar() 
	{
	    listaTipoProducto=managerProducto.findAllTipoProducto();
	    tipo_producto=new ProTipoProducto();
	    panelColapsado=true;
	}
	public void actionListenerColapsarPanel() {
		panelColapsado=!panelColapsado;
	}
	public void actionListenerInsertarTipoProducto() {
		try {
			managerProducto.insertarTipoProducto(tipo_producto);
			listaTipoProducto=managerProducto.findAllTipoProducto();
			tipo_producto=new ProTipoProducto();
			JSFUtil.crearMensajeInfo("Datos de estudiante insertados");
		} catch (Exception e) {
			JSFUtil.crearMensajeError(e.getMessage());
			e.printStackTrace();
		}
	}
	public void actionListenerSeleccionarEstudiante(Estudiante estudiante) {
		estudianteSeleccionado=estudiante;
	}
	public void actionListenerActualizarEstudiante() {
		try {
			managerEstudiante.actualizarEstudiante(estudianteSeleccionado);
			listaEstudiantes=managerEstudiante.findAllEstudiantes();
			JSFUtil.crearMensajeInfo("Datos actualizados");
		} catch (Exception e) {
			JSFUtil.crearMensajeError(e.getMessage());
			e.printStackTrace();
		}
	}
	public void actionListenerEliminarEstudiante(String cedula) {
		managerEstudiante.eliminarEstudiante(cedula);
		listaEstudiantes=managerEstudiante.findAllEstudiantes();
		JSFUtil.crearMensajeInfo("Estudiante eliminado");
	}
	public List<Estudiante> getListaEstudiantes() {
		return listaEstudiantes;
	}

	public void setListaEstudiantes(List<Estudiante> listaEstudiantes) {
		this.listaEstudiantes = listaEstudiantes;
	}
	public Estudiante getEstudiante() {
		return estudiante;
	}
	public void setEstudiante(Estudiante estudiante) {
		this.estudiante = estudiante;
	}
	public boolean isPanelColapsado() {
		return panelColapsado;
	}
	public void setPanelColapsado(boolean panelColapsado) {
		this.panelColapsado = panelColapsado;
	}
	public Estudiante getEstudianteSeleccionado() {
		return estudianteSeleccionado;
	}
	public void setEstudianteSeleccionado(Estudiante estudianteSeleccionado) {
		this.estudianteSeleccionado = estudianteSeleccionado;
	}
	

}
